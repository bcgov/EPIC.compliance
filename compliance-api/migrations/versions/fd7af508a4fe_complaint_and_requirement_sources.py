"""complaint and requirement sources

Revision ID: fd7af508a4fe
Revises: 87ecc5637c13
Create Date: 2024-09-11 15:58:21.588642

"""

from datetime import datetime
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "fd7af508a4fe"
down_revision = "87ecc5637c13"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    requirement_source_table = op.create_table(
        "complaint_requirement_sources",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="The unique identifier of the option",
        ),
        sa.Column("name", sa.String(), nullable=True, comment="The name of the option"),
        sa.Column(
            "sort_order",
            sa.Integer(),
            nullable=True,
            comment="Order of priority. Mainly used order the options while listing",
        ),
        sa.Column("created_date", sa.DateTime(), nullable=False),
        sa.Column("updated_date", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(length=100), nullable=False),
        sa.Column("updated_by", sa.String(length=100), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default="t", nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="f", nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    complaint_source_table = op.create_table(
        "complaint_sources",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="The unique identifier of the option",
        ),
        sa.Column("name", sa.String(), nullable=True, comment="The name of the option"),
        sa.Column(
            "sort_order",
            sa.Integer(),
            nullable=True,
            comment="Order of priority. Mainly used order the options while listing",
        ),
        sa.Column("created_date", sa.DateTime(), nullable=False),
        sa.Column("updated_date", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(length=100), nullable=False),
        sa.Column("updated_by", sa.String(length=100), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default="t", nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="f", nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )

    complaint_sources = [
        {
            "name": "Public",
            "sort_order": 1,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
        {
            "name": "First Nation",
            "sort_order": 2,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
        {
            "name": "Agency",
            "sort_order": 3,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
        {
            "name": "Other",
            "sort_order": 4,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
    ]

    op.bulk_insert(
        complaint_source_table,
        complaint_sources,
    )
    document_types = [
        {
            "name": "Schedule B",
            "sort_order": 1,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
        {
            "name": "Order",
            "sort_order": 2,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
        {
            "name": "EAC Certificate",
            "sort_order": 3,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
        {
            "name": "Certified Project Description",
            "sort_order": 4,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
        {
            "name": "Act (2018)",
            "sort_order": 5,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
        {
            "name": "Compliance Agreement",
            "sort_order": 6,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
        {
            "name": "Act (2002)",
            "sort_order": 7,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
        {
            "name": "Not EA Act",
            "sort_order": 8,
            "created_date": datetime.utcnow(),
            "created_by": "system",
            "is_active": True,
            "is_deleted": False,
        },
    ]
    op.bulk_insert(requirement_source_table, document_types)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("complaint_sources")
    op.drop_table("complaint_requirement_sources")
    # ### end Alembic commands ###
