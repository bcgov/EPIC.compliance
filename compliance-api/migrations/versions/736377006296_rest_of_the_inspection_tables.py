"""rest of the inspection tables 

Revision ID: 736377006296
Revises: a82c5c4a7814
Create Date: 2024-08-28 11:34:15.559657

"""

import os
import json
from alembic import op
import sqlalchemy as sa
from datetime import datetime
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "736377006296"
down_revision = "a82c5c4a7814"
branch_labels = None
depends_on = None


def load_json_file(file_name):
    """Load JSON data from a file."""
    file_path = os.path.join(os.path.dirname(__file__), file_name)
    with open(file_path, "r", encoding="utf-8") as file:
        return json.load(file)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "inspection_attendance_options",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="The unique identifier of the option",
        ),
        sa.Column("name", sa.String(), nullable=True, comment="The name of the option"),
        sa.Column(
            "sort_order",
            sa.Integer(),
            nullable=True,
            comment="Order of priority. Mainly used order the options while listing",
        ),
        sa.Column("created_date", sa.DateTime(), nullable=False),
        sa.Column("updated_date", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(length=100), nullable=False),
        sa.Column("updated_by", sa.String(length=100), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default="t", nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="f", nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "inspection_agencies",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="The unique identifier",
        ),
        sa.Column(
            "agency_id",
            sa.Integer(),
            nullable=False,
            comment="The unique identifier of agency",
        ),
        sa.Column(
            "inspection_id",
            sa.Integer(),
            nullable=False,
            comment="The unique identifier of the inspection",
        ),
        sa.Column("created_date", sa.DateTime(), nullable=False),
        sa.Column("updated_date", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(length=100), nullable=False),
        sa.Column("updated_by", sa.String(length=100), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default="t", nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="f", nullable=False),
        sa.ForeignKeyConstraint(
            ["agency_id"],
            ["agencies.id"],
            name="inspection_agencies_agency_id_agency_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["inspection_id"],
            ["inspections.id"],
            name="inspection_agencies_inspection_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "inspection_firstnations",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="The unique identifier",
        ),
        sa.Column(
            "firstnation_id",
            sa.Integer(),
            nullable=False,
            comment="The unique identifier of the first nation entity from track app",
        ),
        sa.Column("inspection_id", sa.Integer(), nullable=False),
        sa.Column("created_date", sa.DateTime(), nullable=False),
        sa.Column("updated_date", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(length=100), nullable=False),
        sa.Column("updated_by", sa.String(length=100), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default="t", nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="f", nullable=False),
        sa.ForeignKeyConstraint(
            ["inspection_id"],
            ["inspections.id"],
            name="inspection_agencies_inspection_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "inspection_other_attendances",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="The unique identifier",
        ),
        sa.Column(
            "municipal", sa.String(), nullable=True, comment="The municipal attendance"
        ),
        sa.Column(
            "Other",
            sa.String(),
            nullable=True,
            comment="Any other attendance for the inspection",
        ),
        sa.Column("inspection_id", sa.Integer(), nullable=False),
        sa.Column("created_date", sa.DateTime(), nullable=False),
        sa.Column("updated_date", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(length=100), nullable=False),
        sa.Column("updated_by", sa.String(length=100), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default="t", nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="f", nullable=False),
        sa.ForeignKeyConstraint(
            ["inspection_id"],
            ["inspections.id"],
            name="other_attendance_inspection_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "inspection_unapproved_projects",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="The unique identifier",
        ),
        sa.Column(
            "name",
            sa.String(),
            nullable=False,
            comment="The title of the unapproved project",
        ),
        sa.Column(
            "description",
            sa.String(),
            nullable=True,
            comment="The description of the project",
        ),
        sa.Column(
            "authorization",
            sa.String(),
            nullable=True,
            comment="The details of authorization for the project",
        ),
        sa.Column(
            "proponent_name",
            sa.String(),
            nullable=True,
            comment="The details of proponent associated with the project",
        ),
        sa.Column("inspection_id", sa.Integer(), nullable=False),
        sa.Column("created_date", sa.DateTime(), nullable=False),
        sa.Column("updated_date", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(length=100), nullable=False),
        sa.Column("updated_by", sa.String(length=100), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default="t", nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="f", nullable=False),
        sa.ForeignKeyConstraint(
            ["inspection_id"],
            ["inspections.id"],
            name="inspection_unapproved_projects_inspection_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table(
        "inspection_attendance_mappings", schema=None
    ) as batch_op:
        batch_op.drop_constraint(
            "attendance_mappings__option_id_attendance_options_id_fkey",
            type_="foreignkey",
        )
        batch_op.create_foreign_key(
            "attendance_mappings_attendance_option_id_options_id_fkey",
            "inspection_attendance_options",
            ["attendance_option_id"],
            ["id"],
        )
    op.execute("DROP TABLE attendance_options CASCADE")
    with op.batch_alter_table("inspection_initiation_options", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.INTEGER(),
            comment="The unique identifier of the option",
            existing_comment="The unique identifier of the IR type option",
            existing_nullable=False,
            autoincrement=True,
        )

    with op.batch_alter_table("inspections", schema=None) as batch_op:
        batch_op.alter_column(
            "project_id",
            existing_type=sa.INTEGER(),
            nullable=True,
            existing_comment="The unique identifier of the project associated with the inspection",
        )

    with op.batch_alter_table("ir_status_options", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.INTEGER(),
            comment="The unique identifier of the option",
            existing_comment="The unique identifier of the IR type option",
            existing_nullable=False,
            autoincrement=True,
            existing_server_default=sa.text(
                "nextval('ir_status_options_id_seq'::regclass)"
            ),
        )

    with op.batch_alter_table("ir_type_options", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.INTEGER(),
            comment="The unique identifier of the option",
            existing_comment="The unique identifier of the IR type option",
            existing_nullable=False,
            autoincrement=True,
        )

    with op.batch_alter_table("projects", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("abbreviation", sa.String(length=10), nullable=True)
        )
        batch_op.create_unique_constraint(None, ["abbreviation"])
    op.execute(
        sa.text(
            "UPDATE case_file_initiation_options SET name='Complaint' WHERE name='Compliants'"
        )
    )

    # Bind the current connection to the MetaData object
    connection = op.get_bind()
    metadata = sa.MetaData()
    metadata.reflect(bind=connection)

    # Reflect the existing 'projects' table from the database
    project_table = metadata.tables["projects"]
    projects = load_json_file("../seed_data/project_with_abbreviation.json")
    for project_data in projects:
        # Add 'created_date' and 'created_by' fields
        project_data['created_date'] = datetime.utcnow().isoformat() + 'Z'  # UTC time in ISO 8601 format
        project_data['created_by'] = 'system'
        # Check if the project already exists
        query = sa.select(project_table.c.id).where(
           project_table.c.id == project_data["id"]
        )
        # Execute the query
        result = connection.execute(query)
        
        # Fetch the result
        existing_project = result.fetchone()
        print(existing_project)
        if existing_project:
            # If the project exists, update it
            stmt = (
                sa.update(project_table)
                .where(project_table.c.id == existing_project.id)
                .values(project_data)
            )

        else:
            # If the project does not exist, insert it
            stmt = sa.insert(project_table).values(project_data)
        connection.execute(stmt)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("projects", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="unique")
        batch_op.drop_column("abbreviation")

    with op.batch_alter_table("ir_type_options", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.INTEGER(),
            comment="The unique identifier of the IR type option",
            existing_comment="The unique identifier of the option",
            existing_nullable=False,
            autoincrement=True,
        )

    with op.batch_alter_table("ir_status_options", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.INTEGER(),
            comment="The unique identifier of the IR type option",
            existing_comment="The unique identifier of the option",
            existing_nullable=False,
            autoincrement=True,
            existing_server_default=sa.text(
                "nextval('ir_status_options_id_seq'::regclass)"
            ),
        )

    with op.batch_alter_table("inspections", schema=None) as batch_op:
        batch_op.alter_column(
            "project_id",
            existing_type=sa.INTEGER(),
            nullable=False,
            existing_comment="The unique identifier of the project associated with the inspection",
        )

    with op.batch_alter_table("inspection_initiation_options", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            existing_type=sa.INTEGER(),
            comment="The unique identifier of the IR type option",
            existing_comment="The unique identifier of the option",
            existing_nullable=False,
            autoincrement=True,
        )

    with op.batch_alter_table(
        "inspection_attendance_mappings", schema=None
    ) as batch_op:
        batch_op.drop_constraint(
            "inspection_attendance_mappings_attendance_option_id_attendance_options_id_fkey",
            type_="foreignkey",
        )
        batch_op.create_foreign_key(
            "attendance_mappings__option_id_attendance_options_id_fkey",
            "attendance_options",
            ["attendance_option_id"],
            ["id"],
        )

    op.create_table(
        "attendance_options",
        sa.Column(
            "id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="The unique identifier of the attendance option",
        ),
        sa.Column(
            "name",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="The name of the option",
        ),
        sa.Column(
            "sort_order",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Order of priority. Mainly used order the options while listing",
        ),
        sa.Column(
            "created_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_by", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_by", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "is_deleted",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="attendance_options_pkey"),
        sa.UniqueConstraint("name", name="attendance_options_name_key"),
    )
    op.drop_table("inspection_unapproved_projects")
    op.drop_table("inspection_other_attendances")
    op.drop_table("inspection_firstnations")
    op.drop_table("inspection_agencies")
    op.drop_table("inspection_attendance_options")
    op.execute(
        sa.text(
            "UPDATE case_file_initiation_options SET name='Complaints' WHERE name='Compliant'"
        )
    )
    # ### end Alembic commands ###
